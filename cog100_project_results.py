# -*- coding: utf-8 -*-
"""Cog100 Project Results.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18GHlLDXeZbqeeec06V4ogzMfII7r-0F_

# Easier navigation:

------------------------------------
## 0. <a href='#col'>Columns</a>
## 1. <a href='#setup'>Setup</a>
------------------------------------
## 2. <a href='#pca'>PCA</a>
## 3. <a href='#a'>Fixed Entry Feature Investigation</a>
## 4. <a href='#b'>Variable Entry Feature Investigation</a>
## 5. <a href='#c'>Other</a>

<a name='col'></a>
# 0. Columns

0. Timestamp
1. How many units are you currently taking?
2. How old are you?
3. What's your major? ("n/a" if not applicable, otherwise capitalize first letter, ex. "Biology")
4. On a scale from 1 to 10 how productive do you think you were today?  
5. How many assignments/tasks have you accomplished today? (Give in the form of a fraction or percentage)
6. What is your average daily screen time?  (hours)
7. What are the top apps used
8. What social media platforms do you use the most? 
9. How much in total daily? weekly?
10. Are you listening to anything right now? 
11. What music genre do you prefer to listen to?
12. In general are you an athletic/fit person? 
13. How many hours did you spend exercising today?
14. How many times did you exercise this week?
15. Do you try to stay fit? 
16. Why do you exercise? 
17. How much do you drink on average each time? (# of drinks)
18. When was the last time you consumed an alcoholic beverage?
19. Why do you drink?
20. How much sleep did you get last night? 
21. How much sleep do you get on average? 
22. How much sleep do you wish to get on average?
23. Do you take naps regularly? 
24. What is the date?
25. What is the time right now? 
26. On a scale of 1 to 10, how stressed do you feel right now?
27. On a scale of 1 to 10, how stressed have you been on average in the past 6 months?
28. Are you a vegetarian/vegan? 
29. Do you have any dietary restrictions?
30. Number Memory
31. Sequence Memory
32. Visual Memory
33. Memory Sum

<a name='setup'></a>
# 1. Setting up table

Given that we only have ~50 entries, it'd probably be easier to manually edit bad entries than to have to correct it using regex, etc.

A lot of free response columns don't seem very useful, but if you want to investigate it you can edit the data to fit a certain form.
"""

import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
sns.set()
plt.style.use('fivethirtyeight')
import zipfile
import os # Used to interact with the file system
import re
from copy import deepcopy
from tabulate import tabulate
import plotly.express as px

import sklearn
import sklearn.datasets
import sklearn.linear_model
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegressionCV
from sklearn.linear_model import LogisticRegression
from sklearn import linear_model as lm
from sklearn.feature_extraction import DictVectorizer
from IPython.display import display, HTML
import warnings
warnings.filterwarnings('ignore')
# Note: If you're having problems with the 3d scatter plots, uncomment the two␣
#,→lines below, and you should see a version that
# number that is at least 4.1.1.
# import plotly
# plotly.__version__

from google.colab import auth
auth.authenticate_user()

from googleapiclient.discovery import build
service = build('drive', 'v3')

# Run this to mount the Notebook in your Google Drive account 
from google.colab import drive
#drive.mount('/content/drive')
drive.mount('/content/drive', force_remount=True)

"""Specify path for CSV file."""

path = "/content/drive/My Drive/CogSci C100/Cog Group Project/Cogsci100 Survey  - cleaned columns.csv"

df = pd.read_csv(path)
df.head()

"""### 1.1 Print columns

Uncomment print line to print all columns/numbers to replace with section 0.
"""

from pprint import pprint
ctt = 0
for i in df.columns:
  #print(str(ctt) + ". " + i)
  ctt += 1

dict={}
for i in np.arange(33):
  dict[i] = df.columns[i]
df = df.rename(columns={x:y for x,y in zip(df.columns,range(0,len(df.columns)))})
df[33] = df[30] + df[31] + df[32]
dict[33] = "Memory Sum"
df.head()

dict

"""# 2. PCA"""

def pca(df):
  # Center data
  df_mean = df.mean(axis=0)
  df_centered = df - df_mean
  # Scale - each col has unit variance
  df_centered_scaled = df_centered / np.sqrt(np.var(df_centered))
  # for the case where all values are 0, SVD doesn't converge
  df_centered_scaled = df_centered_scaled.fillna(0)
  # Break into components
  #df_centered_scaled.dropna(inplace=True)
  u, s, vt = np.linalg.svd(df_centered_scaled, full_matrices=False)
  v = vt.T
  P = df_centered @ v
  plt.figure(figsize=(12, 4))
  plt.bar(df.columns, vt[0, :], alpha=0.7)
  plt.xticks(df.columns, rotation=90)
  plt.show()
  
  return P

pca(df[[1,2,3,4,5,6,9,10,12,13,14,15,17,18,20,21,22,23,25,26,27,28]])
dict[14], df[14]

"""<a name='a'></a>
# 3. Fixed Entry Feature Investigation

Picking columns with multiple choice / yes-no answers to compare with memory results

ENTER QUESTION NUMBER HERE
"""

k = 17

#-------------
dict[k]

sns.histplot(df[k])

"""ENTER CUTOFF HERE"""

cutoff1 = 1

"""-------------------------------------"""

#df[[k, 30, 31, 32, 33]]

df[[k, 30, 31, 32, 33]].groupby([k]).mean()

df[[k, 30]].groupby([k]).count()



"""-------------------------------------------------------------

## Numerical X-axis only

Average scores with less than CUTOFF
"""

np.average(df[df[k] <= cutoff1][30]), np.average(df[df[k] <= cutoff1][31]), np.average(df[df[k] <= cutoff1][32]), np.average(df[df[k] <= cutoff1][33])

"""Average scores with more than CUTOFF"""

np.average(df[df[k] > cutoff1][30]), np.average(df[df[k] > cutoff1][31]), np.average(df[df[k] > cutoff1][32]), np.average(df[df[k] > cutoff1][33])

"""Graphs"""

low = True

sns.regplot(x=df[k], y=df[30], color="r"
      , lowess=low
      )

np.corrcoef(df[k], df[30])[0, 1]

sns.regplot(x=df[k], y=df[31], color="y"
      , lowess=low
      )

np.corrcoef(df[k], df[31])[0, 1]

sns.regplot(x=df[k], y=df[32], color="g"
      , lowess=low
      )

np.corrcoef(df[k], df[32])[0, 1]

sns.regplot(x=df[k], y=df[33], color="b"
      , lowess=low
      )

np.corrcoef(df[k], df[33])[0, 1]

"""<a name='b'></a>
# 4.  Variable Entry Feature Investigation

Picking columns with free response entries to compare with memory results

<a name='c'></a>
# 5. Other

Anything that does not involve memory tests as a comparison
"""